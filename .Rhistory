#
# # Check balance student balance before matching
df <- as.data.frame(df)
balanceTable(df[c("X1", "X2", "Treatment")], treatment = "Treatment")
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
df
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
dim(df)
df
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
?matchMulti
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
matchMulti(data = df,
treatment = Treatment,
school.id = "Group",
student.vars = c("X1", "X2"))
df
catholic_schools
df
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
table(df[["Group"]], df[["Treatment"]])
dim(table(df[["Group"]], df[["Treatment"]]))
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
dim(treat.table)
treat.table <- table(df[["Group"]], df[["Treatment"]])
dim(treat.table)
apply(treat.table, 1, function(x) which(x > 0) - 1)
dim(apply(treat.table, 1, function(x) which(x > 0) - 1))
apply(treat.table, 1, function(x) which(x > 0) - 1)
apply(treat.table, 1, function(x) which(x > 0) - 1)
matchMulti(data = df[c("X1", "X2", "Treatment", "Group")],
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
apply(treat.table, 1, function(x) which(x > 0) - 1)
type(df)
df
df <- generate_multilevel_data(S = 20, Ns = 16, p = 2) %>%
assign_treatment() %>%
as.data.frame()
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
test_match <- matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
test_match
test_match$matched
test_match$dropped
test_match$student.matches
test_match$school.match
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
#test_match <- matchMulti(data = df,
#           treatment = "Treatment",
#           school.id = "Group",
#           student.vars = c("X1", "X2"))
#test_match$school.match
pwd()
getwd()
setwd("/Users/bernado/Desktop/academics/carcajou/research/matchAhead")
knitr::opts_chunk$set(echo = TRUE)
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2) %>%
assign_treatment()
# Importing libraries
set.seed(525600)
library(dplyr)
library(optmatch)
library(matchMulti)
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2) %>%
assign_treatment()
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2)
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
#df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
#  assign_treatment() %>%
#  as.data.frame()
#test_match <- matchMulti(data = df,
#           treatment = "Treatment",
#           school.id = "Group",
#           student.vars = c("X1", "X2"))
#test_match$school.match
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2)
df
getwd()
source("../scripts/make_grouped.R")
df
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
df
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
newdf
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
newdf
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
# Importing libraries
set.seed(525600)
library(dplyr)
library(optmatch)
library(matchMulti)
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
#df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
#  assign_treatment() %>%
#  as.data.frame()
#test_match <- matchMulti(data = df,
#           treatment = "Treatment",
#           school.id = "Group",
#           student.vars = c("X1", "X2"))
#test_match$school.match
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
source("../scripts/make_grouped.R")
source("~/Desktop/academics/carcajou/research/matchAhead/scripts/make_grouped.R", echo=TRUE)
source("../scripts/make_grouped.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
newdf
# Create a sample dataframe
set.seed(123)  # For reproducibility
df <- data.frame(
group_var = rep(c("A", "B"), each = 5),
level1 = rnorm(10, mean = 50, sd = 10),
level2 = rnorm(10, mean = 100, sd = 20),
unit1 = rnorm(10, mean = 200, sd = 30),
unit2 = rnorm(10, mean = 300, sd = 40),
outcome_var = sample(1:100, 10),
covar1 = rnorm(10),
covar2 = rnorm(10)
)
# Display the original dataframe
print("Original Data:")
print(df)
# Define your variables
grouping <- "group_var"
group_level <- c("level1", "level2")
unit_level <- c("unit1", "unit2")
outcome <- "outcome_var"
# Apply the make_grouped function and assign the result to a new dataframe
result_df <- make_grouped(
data = df,
grouping = grouping,
group_level = group_level,
unit_level = unit_level,
outcome = outcome
)
# Display the modified dataframe
print("Modified Data with Group Averages and Deviations:")
print(result_df)
source("../scripts")
source("../scripts/*.R")
source("../scripts/model_outcomes.R")
source("../scripts/make_grouped.R")
source("../scripts/model_outcomes.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
source("../scripts/make_grouped.R")
source("../scripts/model_outcomes.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group",
covars = c("X1", "X2", "X3", "X4", "X5"))
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group")
source("~/Desktop/academics/carcajou/research/matchAhead/scripts/model_outcomes.R", echo=TRUE)
source("../scripts/make_grouped.R")
source("../scripts/model_outcomes.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group")
write_formula <- function(data, outcome, grouping){
covars <- data %>%
select(-all_of(c(outcome, grouping)))
lhs_formula <- paste0(outcome, " ~ ", "(1 | ", grouping, ") + ")
rhs_formula <- paste(covars, sep = " + ")
return(paste0(lhs_formula, rhs_formula))
}
source("../scripts/make_grouped.R")
source("../scripts/model_outcomes.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group")
source("../scripts/make_grouped.R")
source("../scripts/model_outcomes.R")
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
newdf <- make_grouped(df, grouping = "Group", group_level = c("X4", "X5"), unit_level = c("X1", "X2", "X3"), outcome = "Y")
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group")
source("../scripts/model_outcomes.R")
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group")
source("~/Desktop/academics/carcajou/research/matchAhead/scripts/model_outcomes.R", echo=TRUE)
source("../scripts/model_outcomes.R")
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group")
source("../scripts/model_outcomes.R")
damodel <- model_outcomes(data = newdf,
outcome = "Y",
grouping = "Group")
damodel

member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
#n(df)
#??multiMatch
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2) %>%
assign_treatment()
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
df
df
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
df
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
?matchMulti
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2) %>%
assign_treatment()
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
# # Load Catholic school data
# data(catholic_schools)
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2) %>%
assign_treatment()
# # Check balance student balance before matching
# balanceTable(catholic_schools[c(student.cov,'sector')],  treatment = 'sector')
balanceTable(df[c("X1","X2", "Treatment")], treatment = "Treatment")
# # Check balance student balance before matching
# balanceTable(catholic_schools[c(student.cov,'sector')],  treatment = 'sector')
balanceTable(df[c("X1","X2", "Treatment")], treatment = "Group")
# # Check balance student balance before matching
# balanceTable(catholic_schools[c(student.cov,'sector')],  treatment = 'sector')
balanceTable(df[c("X1","X2", "Group")], treatment = "Group")
df[c("X1","X2", "Treatment"),]
# # Load Catholic school data
# data(catholic_schools)
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2) %>%
assign_treatment()
df[c("X1","X2", "Treatment"),]
df[,c("X1","X2", "Treatment")]
df[c("X1","X2", "Treatment")]
# # Load Catholic school data
data(catholic_schools)
View(catholic_schools)
# # Load Catholic school data
data(catholic_schools)
#
student.cov <- c('minority','female','ses')
#
# # Check balance student balance before matching
balanceTable(catholic_schools[c(student.cov,'sector')],  treatment = 'sector')
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 2) %>%
assign_treatment()
catholic_schools[c(student.cov,'sector')]
balanceTable(df[c("X1", "X2", "Treatment")])
balanceTable(df[c("X1", "X2", "Treatment")], treatment = "Treatment")
??matchMulti
df["Treatment"]
#
# # Check balance student balance before matching
df <- as.data.frame(df)
balanceTable(df[c("X1", "X2", "Treatment")], treatment = "Treatment")
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
df
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
dim(df)
df
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
matchMulti(df, "Treatment", school.id = "Group", student.vars = c("X1", "X2"))
?matchMulti
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
matchMulti(data = df,
treatment = Treatment,
school.id = "Group",
student.vars = c("X1", "X2"))
df
catholic_schools
df
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
table(df[["Group"]], df[["Treatment"]])
dim(table(df[["Group"]], df[["Treatment"]]))
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
dim(treat.table)
treat.table <- table(df[["Group"]], df[["Treatment"]])
dim(treat.table)
apply(treat.table, 1, function(x) which(x > 0) - 1)
dim(apply(treat.table, 1, function(x) which(x > 0) - 1))
apply(treat.table, 1, function(x) which(x > 0) - 1)
apply(treat.table, 1, function(x) which(x > 0) - 1)
matchMulti(data = df[c("X1", "X2", "Treatment", "Group")],
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
apply(treat.table, 1, function(x) which(x > 0) - 1)
type(df)
df
df <- generate_multilevel_data(S = 20, Ns = 16, p = 2) %>%
assign_treatment() %>%
as.data.frame()
matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
test_match <- matchMulti(data = df,
treatment = "Treatment",
school.id = "Group",
student.vars = c("X1", "X2"))
test_match
test_match$matched
test_match$dropped
test_match$student.matches
test_match$school.match
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
assign_treatment() %>%
as.data.frame()
#test_match <- matchMulti(data = df,
#           treatment = "Treatment",
#           school.id = "Group",
#           student.vars = c("X1", "X2"))
#test_match$school.match
setwd("~/Desktop/academics/carcajou/research/matchAhead")
knitr::opts_chunk$set(echo = TRUE)
# Importing libraries
set.seed(525600)
library(dplyr)
library(optmatch)
library(matchMulti)
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
#df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
#  assign_treatment() %>%
#  as.data.frame()
#test_match <- matchMulti(data = df,
#           treatment = "Treatment",
#           school.id = "Group",
#           student.vars = c("X1", "X2"))
#test_match$school.match
group_distances <- function(data, grouping, group_level, unit_level, outcome){
design_df <- make_grouped(data, grouping, group_level, unit_level, outcome)
outcome_models <- model_outcomes(data, grouping, group_level, unit_level, outcome)
group_model <- outcome_models[["group"]]
unit_model <- outcome_models[["unit"]]
group_se <- get_se(group_model)
student_se <- get_se(student_model)
calipers <- calc_caliper(group_model, student_model)
group_pairs <- in_caliper(data, grouping, group_model, calipers[["group"]])
pair_distances <- get_distances(group_pairs, design_df, calipers[["unit"]])
return(group_pairs %>% mutate(matchability = pair_distances))
}
# # Load Catholic school data
data(catholic_schools)
#
student.cov <- c('minority','female','ses')
#
# # Check balance student balance before matching
df <- as.data.frame(df)
balanceTable(catholic_schools[c(student.cov,'sector')],  treatment = 'sector')
balanceTable(df[c("X1", "X2", "Treatment")], treatment = "Treatment")
# # Load Catholic school data
data(catholic_schools)
#
student.cov <- c('minority','female','ses')
#
# # Check balance student balance before matching
df <- as.data.frame(df)
balanceTable(catholic_schools[c(student.cov,'sector')],  treatment = 'sector')
balanceTable(df[c("X1", "X2", "Treatment")], treatment = "Treatment")
# # Load Catholic school data
data(catholic_schools)
#
student.cov <- c('minority','female','ses')
#
# # Check balance student balance before matching
df <- as.data.frame(df)
balanceTable(catholic_schools[c(student.cov,'sector')],  treatment = 'sector')
balanceTable(df[c("X1", "X2", "Treatment")], treatment = "Treatment")
knitr::opts_chunk$set(echo = TRUE)
# Importing libraries
set.seed(525600)
library(dplyr)
library(optmatch)
library(matchMulti)
generate_multilevel_data <- function(S, Ns, p, gsd = 10, ssd = 1){
# First, initialize the group structure
unique_groups <- 1:S
groupmeans <- rnorm(S, mean = 0, sd = gsd)
if(length(Ns) == 1){
Ns <- rep(Ns, S)
}
N <- sum(Ns)
assigned_groups <- numeric()
for(i in 1:S){
assigned_groups <- c(assigned_groups, rep(i, Ns[i]))
}
assigned_groups <- as.factor(assigned_groups)
# Now, initialize the member level structure within groups
X <- matrix(rnorm(N*p, mean = 0, sd = 1), nrow = N, ncol = p)
beta <- matrix(rnorm(p, mean = 0, sd = 1), nrow = p)
member_outcomes <- numeric()
for(i in 1:S){
group_member_outcomes <- rnorm(Ns[i], mean = X %*% beta + groupmeans[i], sd = ssd)
member_outcomes <- c(member_outcomes, group_member_outcomes)
}
# Combine covariates and proceed
colnames(X) <- paste0("X", 1:p)
design <- as_tibble(X) %>%
mutate(Y = member_outcomes) %>%
mutate(Group = assigned_groups) %>%
relocate(Y, Group)
return(design)
}
assign_treatment <- function(df,  Nt = NULL){
N <- nrow(df)
S <- df %>%
pull(Group) %>%
unique() %>%
length()
if(is.null(Nt)){
Nt = as.integer(S/2)
}
treatment <- rep(1, Nt)
control <- rep(0, S - Nt)
treatment_assignment <- sample(c(treatment, control))
return(df %>% mutate(Treatment = if_else(treatment_assignment[as.integer(Group)] == 1, 1, 0)) %>% relocate(Y, Treatment))
}
#df <- generate_multilevel_data(S = 8000, Ns = 625, p = 2) %>%
#  assign_treatment() %>%
#  as.data.frame()
#test_match <- matchMulti(data = df,
#           treatment = "Treatment",
#           school.id = "Group",
#           student.vars = c("X1", "X2"))
#test_match$school.match
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7)
df
match_on(X1, data =df)
match_on("X1", data =df)
match_on(df["X1"], data =df)
match_on(df$X1, data =df)
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7) %>% assign_treatment()
match_on(df$X1, z = df$Treatment, data = df)
data
df
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7) %>% assign_treatment()
df
match_on(df$X1, z = df$Treatment, data = df)
as.data.frame(df_
as.data.frame(df)
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7) %>% assign_treatment()
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7) %>% assign_treatment()
df<-as.data.frame(df)
match_on(df$X1, z = df$Treatment, data = df)
data
match_on(x = df$X1, z = df$Treatment, data = df)
match_on(x = df$X1, z = df$Treatment, data = df)
names(df)
names(df$X1)
names(df$X1) <- 1:length(df$X1)
df$X1
names(df$X1)
names(df$X1) <- 1:length(df$X1)
rownames(df$X1) <- 1:length(df$X1)
rownames(df) <- 1:length(df$X1)
df
match_on(x = df$X1, z = df$Treatment, data = df)
df <- generate_multilevel_data(S = 5, Ns = c(1, 80, 42, 2, 4), p = 7) %>% assign_treatment()
df<-as.data.frame(df)
rownames(df) <- 1:length(df$X1)
match_on(x = df$X1, z = df$Treatment, data = df)
outer(df[1:10, "X1"], df[4:141, "X3"])
dim(outer(df[1:10, "X1"], df[4:141, "X3"]))
?outer
outer(df[1:10, "X1"], df[4:141, "X3"], FUN = function(x, y) return((x - y)^2))
df[1:10,"X1"]
df[1,"X1"]
df[4,"X3"]
(df[1,"X1"]-df[4,"X3"])^2
outer(df[1:10, "X1"], df[4:141, "X3"], FUN = function(x, y) return((x - y)^2))
(df[1,"X1"]-df[4,"X3"])^2
cat <- c(1, 2, 3, 4, 5, 6)
names(cat) <- c("a", "b", "c", "d", "e", "f")
cat["a"]
sqrt(log(1200))
sqrt(log(2000))
sqrt(log(800))
sqrt(log(80000))
sqrt(log(8000000))
sqrt(log(800000000))
sqrt(log(80000000))
sqrt(log(8000000))
sqrt(log(9000000))
sqrt(2*log(2*1200))
